const get = require("node-fetch");
const unirest = require("unirest");
const randomPuppy = require("random-puppy");
const superagent = require("superagent");

var subreddits = [
  "PhysicsMemes",
  "MinecraftMemes",
  "dankmeme",
  "Dankmemes",
  "dankmemer",
  "Discordmemes",
  "me_irl"
]

// meme
var memer = {

    meme: function () {
      return new Promise(async function(resolve, reject) {
        var randSubreddit = subreddits[Math.round(Math.random() * (subreddits.length - 1))];
        randomPuppy(randSubreddit).then(url => {
          resolve(url)
        })
      })
    },
    //joke
    joke: function () {

        return new Promise(async function(resolve, reject) {
          var req = unirest("GET", "https://joke3.p.rapidapi.com/v1/joke");

          req.query({
            "nsfw": "false"
          });

          req.headers({
            "x-rapidapi-host": "joke3.p.rapidapi.com",
            "x-rapidapi-key": "15b8508641msh638c71f5d8f7d31p137460jsn25b13c027469"
          });


          req.end(function (res) {
            if (res.error) throw new Error(res.error);

            resolve(res.body.content);
          });
        })

    },
  nsfwjoke: function () {

    return new Promise(async function (resolve, reject) {
      var req = unirest("GET", "https://joke3.p.rapidapi.com/v1/joke");

      req.query({
        "nsfw": "true"
      });

      req.headers({
        "x-rapidapi-host": "joke3.p.rapidapi.com",
        "x-rapidapi-key": "15b8508641msh638c71f5d8f7d31p137460jsn25b13c027469"
      });


      req.end(function (res) {
        if (res.error) throw new Error(res.error);

        resolve(res.body.content);
      });
    })

  },
    //image gen
    clydify: function(text) {

      if (!text) throw new TypeError("Missing text query");

      return new Promise(async function(resolve, reject) {
        var response = await get(`https://nekobot.xyz/api/imagegen?type=clyde&text=${text}`)
        response = await response.json()
        resolve(response.message)
      })

    },
  trigger: function (avatar) {

    if (!avatar) throw new TypeError("Missing avatar query");

    return new Promise(async function (resolve, reject) {
      var response = (`https://some-random-api.ml/beta/triggered?avatar=${avatar}`)
      resolve(response)
    })

  },
  gay: function (avatar) {

    if (!avatar) throw new TypeError("Missing avatar query");

    return new Promise(async function (resolve, reject) {
      var response = (`https://some-random-api.ml/beta/gay?avatar=${avatar}`)
      resolve(response)
    })

  },
  wasted: function (avatar) {

    if (!avatar) throw new TypeError("Missing avatar query");

    return new Promise(async function (resolve, reject) {
      var response = (`https://some-random-api.ml/beta/wasted?avatar=${avatar}`)
      resolve(response)
    })

  },
  invert: function (avatar) {

    if (!avatar) throw new TypeError("Missing avatar query");

    return new Promise(async function (resolve, reject) {
      var response = (`https://some-random-api.ml/beta/invert?avatar=${avatar}`)
      resolve(response)
    })

  },
  greyscale: function (avatar) {

    if (!avatar) throw new TypeError("Missing avatar query");

    return new Promise(async function (resolve, reject) {
      var response = (`https://some-random-api.ml/beta/greyscale?avatar=${avatar}`)
      resolve(response)
    })

  },
  qrcodegen: function (text) {
    
    if (!text) throw new TypeError("Missing text query");

    return new Promise(async function (resolve, reject){

      var req = unirest("GET", "https://pierre2106j-qrcode.p.rapidapi.com/api");

      req.query({
        "backcolor": "ffffff",
        "pixel": "50 to 500",
        "ecl": "L | M| Q | H",
        "forecolor": "000000",
        "type": "text | url | tel | sms | email",
        "text": `${text}`
      });

      req.headers({
        "x-rapidapi-host": "pierre2106j-qrcode.p.rapidapi.com",
        "x-rapidapi-key": "15b8508641msh638c71f5d8f7d31p137460jsn25b13c027469"
      });


      req.end(function (res) {
        if (res.error) throw new Error(res.error);

        resolve(res.body);
      });
    })

  },
  barcodegen: function (text) {

    if (!text) throw new TypeError("Missing text query");

    return new Promise(async function (resolve, reject) {
      var response = (`http://barcodes4.me/barcode/c128b/${text}.png`)
      resolve(response)
    })

  },
  convertImage: function (text) {

    if (!text) throw new TypeError("Missing text query");

    return new Promise(async function (resolve, reject) {

    var req = unirest("GET", "https://img4me.p.rapidapi.com/");

    req.query({
      "fcolor": "#ffffff",
      "bcolor": "#23272A",
      "font": "comic",
      "size": "25",
      "type": "png",
      "text": `${text}`
    });

    req.headers({
      "x-rapidapi-host": "img4me.p.rapidapi.com",
      "x-rapidapi-key": "15b8508641msh638c71f5d8f7d31p137460jsn25b13c027469"
    });


    req.end(function (res) {
      if (res.error) throw new Error(res.error);

      resolve(res.body);
    });
  })

},
// nsfw
porn: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=pgif')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
anal: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=anal')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
gonewild: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=gonewild')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
pussy: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=pussy')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
fourk: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=4k')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
ass: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=ass')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
hentai: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=hentai')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },  
hanal: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=hanal')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
thigh: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=thigh')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  },
neko: function () {
    return new Promise(async function (resolve, reject) {
      superagent.get('https://nekobot.xyz/api/image?type=neko')
        .end((err, response) => {
          resolve(response.body.message);
        });
    })

  }

}

module.exports = memer;